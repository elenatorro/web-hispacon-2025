---
// @ts-ignore
import { Icon } from "astro-icon/components";
import type { ScheduleProps } from "@/types/schedule";
import Link from "@/components/ui/link.astro";

import { 
  formatDuration, 
  getDurationHeight, 
  getDurationIntensity, 
  getTimeEndFromDuration,
  getEventTimeDisplay,
  getEventTypeStyle,
  getEventIcon,
  normalizeEvents,
  getTotalEventCount
} from "@/utils/schedule";
import { scheduleData } from "@/data/schedule";

export interface Props extends ScheduleProps {}

const { layout = "vertical", showDescription = true } = Astro.props;
---

<div class="w-full">
  <!-- Mobile Dropdown Navigation -->
  <div class="md:hidden mb-8">
    <div class="relative">
      <button 
        type="button" 
        class="schedule-dropdown-toggle w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-left focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        aria-expanded="false"
      >
        <div class="flex items-center justify-between">
          <div>
            <div class="font-bold text-gray-900 schedule-dropdown-selected-day">
              {scheduleData[0].dayName}
            </div>
            <div class="text-sm text-gray-500 schedule-dropdown-selected-date">
              {scheduleData[0].date}
            </div>
          </div>
          <svg class="h-5 w-5 text-gray-400 schedule-dropdown-chevron transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </div>
      </button>
      
      <div class="schedule-dropdown-menu absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden">
        {scheduleData.map((day, index) => (
          <button
            type="button"
            class={`schedule-dropdown-item w-full text-left px-4 py-3 hover:bg-gray-100 transition-colors ${
              index === 0 ? 'bg-indigo-50 text-indigo-600' : 'text-gray-900'
            }`}
            data-tab={index}
          >
            <div class="font-bold">{day.dayName}</div>
            <div class="text-sm text-gray-500">{day.date}</div>
          </button>
        ))}
      </div>
    </div>
  </div>

  <!-- Desktop Tab Navigation -->
  <div class="hidden md:block border-b border-gray-200 mb-8">
    <nav class="-mb-px flex space-x-8 justify-center flex-wrap" aria-label="Tabs">
      {scheduleData.map((day, index) => (
        <button
          class={`schedule-tab py-2 px-4 border-b-2 font-medium text-sm transition-colors ${
            index === 0 
              ? 'border-indigo-500 text-indigo-600' 
              : 'border-transparent text-black-500 hover:text-black-700 hover:border-gray-300'
          }`}
          data-tab={index}
          type="button"
        >
          <div class="text-center">
            <div class="font-bold">{day.dayName}</div>
            <div class="text-lg">{day.date}</div>
          </div>
        </button>
      ))}
    </nav>
  </div>

  <!-- Tab Content -->
  {scheduleData.map((day, dayIndex) => (
    <div
      class={`schedule-content ${dayIndex === 0 ? 'block' : 'hidden'}`}
      data-content={dayIndex}
    >
      <div class="mb-6">
        <!-- Track Legend -->
        <div class="flex flex-wrap gap-2 mb-6">
          {day.tracks.map((track) => (
            <div class="flex items-center gap-2 px-3 py-1 rounded-full bg-white border text-sm">
              <div class={`w-3 h-3 rounded-full ${track.color}`}></div>
              <span class="font-medium">{track.name}</span>
            </div>
          ))}
        </div>
      </div>

      {layout === "vertical" ? (
        <!-- Vertical Multi-Track Layout -->
        <div class="space-y-8">
          {day.timeSlots.map((timeSlot) => (
            // <div class="border rounded-lg p-4 bg-gray-50">
            <div class="bg-white border-1 border-indigo-200 rounded-lg p-4">
              <!-- Time Header -->
              <div class="flex items-center gap-3 mb-4">
                <div class="bg-indigo-600 text-white px-3 py-1 rounded-lg font-bold text-lg">
                  {timeSlot.time}
                </div>
              </div>
              
              {/* Check if this is a special event */}
              {timeSlot.isSpecialEvent ? (
                <!-- Special Event Layout -->
                <div class="w-full max-w-lg">
                  <div class="text-m text-purple-700 font-semibold mb-2">
                    <a href="https://www.entrapolis.com/entradas/nit-de-podcasts-a-la-hispacon-2025" target="_blank" class="text-purple-800 hover:text-purple-600 underline underline-offset-2 hover:underline-offset-4 transition-all duration-200">
                      <Icon class="inline w-4 h-4 mr-1" name="bx:link-external" />
                      Reserva tu entrada aquí
                    </a>
                  </div>
                  {Object.entries(timeSlot.events).map(([eventKey, eventData]) => {
                    const events = normalizeEvents(eventData);
                    return events.map((event) => (
                      <div class={`rounded-lg border-2 p-4 my-4 transition-all duration-200 hover:shadow-md relative ${getEventTypeStyle(event.type)} ${getDurationIntensity(event.duration)}`}>
                        <!-- Special event indicator -->
                        <div class="absolute left-0 top-0 bottom-0 w-1 rounded-l-lg bg-gradient-to-b from-purple-500 to-pink-500"></div>
                        
                        <!-- Event Header -->
                        <div class="flex items-center justify-between gap-2 mb-1">
                          <div class="flex items-center gap-2">
                            <span class="text-sm font-bold">
                              <a href="https://maps.app.goo.gl/EjkEVs2uvpnuyVWW8" target="_blank" class="text-purple-800 hover:text-purple-600 underline underline-offset-2 hover:underline-offset-4 transition-all duration-200">
                                Sala El Ciervo
                              </a>
                            </span>
                          </div>
                          <div class={`px-2 py-1 rounded-full text-xs font-medium ${
                            event.duration <= 30 ? 'bg-green-100 text-green-700' :
                            event.duration <= 60 ? 'bg-blue-100 text-blue-700' :
                            event.duration <= 120 ? 'bg-orange-100 text-orange-700' :
                            'bg-red-100 text-red-700'
                          }`}>
                            {formatDuration(event.duration)}
                          </div>
                        </div>

                        <div class="flex items-start gap-2 mb-1">
                          <Icon 
                            class="w-4 h-4 mt-0.5 flex-shrink-0 text-purple-600" 
                            name={getEventIcon(event.type)} 
                          />
                          <div class="min-w-0 flex-1">
                            <h4 class="font-semibold text-base leading-tight mb-1 text-purple-900">
                              {event.title}
                              {event.lang === 'ca' && (
                                <span class="ml-2 px-2 py-0.5 rounded bg-yellow-200 text-yellow-900 text-xs font-semibold align-middle">Català</span>
                              )}
                            </h4>
                          </div>
                        </div>

                        <div class="text-sm text-purple-800 mb-1 rounded py-1">
                          <Icon class="inline w-4 h-4 mr-1" name="bx:bxs-time" />
                          {getEventTimeDisplay(timeSlot.time, event)}
                        </div>
                        
                        {event.speaker && (
                          <p class="text-sm mb-1 text-purple-700">
                            <Icon class="inline w-4 h-4 mr-1" name="bx:bxs-user" />
                            {event.speaker}
                          </p>
                        )}
                        
                        {showDescription && event.description && (
                          <p class="text-sm text-purple-600 pt-2">
                            {event.description}
                          </p>
                        )}
                      </div>
                    ));
                  })}
                </div>
              ) : (
                <!-- Regular Events Grid -->
              <div class={`grid grid-cols-1 gap-4 ${
                day.tracks.length === 3 
                  ? 'md:grid-cols-2 lg:grid-cols-3' 
                  : 'md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
              }`}>
                {day.tracks.map((track) => {
                  const eventData = timeSlot.events[track.id];
                  const events = normalizeEvents(eventData);
                  return (
                    <div class={`min-h-[120px] flex flex-col`}>
                      {events.length > 0 ? (
                        <div class="space-y-2">
                          {events.map((event, eventIndex) => (
                            <div class={`rounded-lg border-2 p-4 transition-all duration-200 hover:shadow-md relative ${getEventTypeStyle(event.type)} ${getDurationIntensity(event.duration)}`}>
                              <!-- Duration indicator bar -->
                              <div class={`absolute left-0 top-0 bottom-0 w-1 rounded-l-lg ${track.color} opacity-80`}></div>
                              
                              <!-- Track Header -->
                              <div class="flex items-center justify-between gap-2 mb-2">
                                <div class="flex items-center gap-2">
                                  <div class={`w-3 h-3 rounded-full ${track.color}`}></div>
                                  <span class="text-sm font-bold text-black-600">{track.name}</span>
                                  {/* Multi-event indicator */}
                                  {events.length > 1 && (
                                    <div class="text-sm bg-gray-200 text-black-700 px-1 rounded">{eventIndex + 1}/{events.length}</div>
                                  )}
                                </div>
                                {/* Duration badge */}
                                <div class={`px-2 py-1 rounded-full text-xs font-medium ${
                                  event.duration <= 30 ? 'bg-green-100 text-green-700' :
                                  event.duration <= 60 ? 'bg-blue-100 text-blue-700' :
                                  event.duration <= 120 ? 'bg-orange-100 text-orange-700' :
                                  'bg-red-100 text-red-700'
                                }`}>
                                  {formatDuration(event.duration)}
                                </div>
                              </div>

                              <div class="flex items-start gap-2 mb-2">
                                <Icon 
                                  class="w-4 h-4 mt-0.5 flex-shrink-0" 
                                  name={getEventIcon(event.type)} 
                                />
                                <div class="min-w-0 flex-1">
                                  <h4 class="font-semibold text-base leading-tight mb-1">
                                    {event.title}
                                    {event.lang === 'ca' && (
                                      <span class="ml-2 px-2 py-0.5 rounded bg-yellow-200 text-yellow-900 text-xs font-semibold align-middle">Català</span>
                                    )}
                                  </h4>
                                </div>
                              </div>

                              {event.link && (
                                <a href={event.link} target="_blank" rel="noopener" class="text-sm text-blue-600 hover:underline inline-flex items-center gap-1">
                                  <Icon name="bx:link-external" class="inline w-4 h-4" />
                                  Inscripción
                                </a>
                              )}

                              <div class="text-sm text-black-600 mb-2 rounded py-2">
                                <Icon class="inline w-4 h-4 mr-1" name="bx:bxs-time" />
                                {getEventTimeDisplay(timeSlot.time, event)}
                              </div>
                              
                              {event.speaker && (
                                <p class="text-sm mb-1 text-black-700">
                                  <Icon class="inline w-4 h-4 mr-1" name="bx:bxs-user" />
                                  {event.speaker}
                                </p>
                              )}
                              
                              {showDescription && event.description && (
                                <p class="text-sm text-black-600 pt-4">
                                  {event.description}
                                </p>
                              )}
                            </div>
                          ))}
                        </div>
                      ) : (
                        <!-- Empty slot -->
                        <div class="rounded-lg border-2 border-dashed border-gray-200 p-4 h-full flex items-center justify-center">
                          <div class="text-center text-black-400">
                            <div class="flex items-center gap-2 mb-1">
                              <div class={`w-3 h-3 rounded-full ${track.color}`}></div>
                              <span class="text-sm font-medium">{track.name}</span>
                            </div>
                            <span class="text-sm">Sin programar</span>
                          </div>
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
              )}
            </div>
          ))}
        </div>
      ) : (
        <!-- Horizontal Compact Layout -->
        <div class="overflow-x-auto">
          <table class="min-w-full border-collapse">
            <thead>
              <tr class="bg-gray-100">
                <th class="border border-gray-300 px-3 py-2 text-left font-bold text-sm">
                  Hora
                </th>
                {day.tracks.map((track) => (
                  <th class="border border-gray-300 px-3 py-2 text-left font-bold text-sm min-w-[200px]">
                    <div class="flex items-center gap-2">
                      <div class={`w-3 h-3 rounded-full ${track.color}`}></div>
                      {track.name}
                    </div>
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {day.timeSlots.map((timeSlot) => (
                <tr class="hover:bg-gray-50">
                  <td class="border border-gray-300 px-3 py-2 font-bold text-sm bg-indigo-50">
                    {timeSlot.time}
                  </td>
                  {day.tracks.map((track) => {
                    const eventData = timeSlot.events[track.id];
                    const events = normalizeEvents(eventData);
                    return (
                      <td class="border border-gray-300 px-3 py-2 text-base align-top">
                        {events.length > 0 ? (
                          <div class="space-y-2">
                            {events.map((event, eventIndex) => (
                              <div class={`rounded p-2 relative ${getEventTypeStyle(event.type)} ${getDurationIntensity(event.duration)}`}>
                                {/* Duration indicator bar */}
                                <div class={`absolute left-0 top-0 bottom-0 w-1 rounded-l ${track.color} opacity-80`}></div>
                                
                                <div class="flex items-start justify-between gap-1 mb-1">
                                  <div class="flex items-start gap-1 flex-1">
                                    <Icon 
                                      class="w-4 h-4 mt-0.5 flex-shrink-0" 
                                      name={getEventIcon(event.type)} 
                                    />
                                    <div class="min-w-0 flex-1">
                                      <div class="font-semibold text-sm leading-tight">
                                        {event.title}
                                        {event.lang === 'ca' && (
                                          <span class="ml-2 px-2 py-0.5 rounded bg-yellow-200 text-yellow-900 text-xs font-semibold align-middle">Català</span>
                                        )}
                                      </div>
                                      {/* Multi-event indicator */}
                                      {events.length > 1 && (
                                        <div class="text-sm text-black-500 mt-1">{eventIndex + 1}/{events.length}</div>
                                      )}
                                    </div>
                                  </div>
                                  {/* Duration badge */}
                                  <div class={`px-1 py-0.5 rounded text-sm font-medium ml-1 ${
                                    event.duration <= 30 ? 'bg-green-100 text-green-700' :
                                    event.duration <= 60 ? 'bg-blue-100 text-blue-700' :
                                    event.duration <= 120 ? 'bg-orange-100 text-orange-700' :
                                    'bg-red-100 text-red-700'
                                  }`}>
                                    {formatDuration(event.duration)}
                                  </div>
                                </div>

                                {event.link && (
                                  <a href={event.link} target="_blank" rel="noopener" class="text-sm text-blue-600 hover:underline inline-flex items-center gap-1">
                                    <Icon name="bx:link-external" class="inline w-4 h-4" />
                                    Inscripción
                                  </a>
                                )}
                                
                                {event.speaker && (
                                  <p class="text-sm mb-1 opacity-90">
                                    <Icon class="inline w-4 h-4 mr-1" name="bx:bxs-user" />
                                    {event.speaker}
                                  </p>
                                )}
                                
                                {/* Enhanced time information */}
                                <div class="text-sm opacity-75 bg-gray-100 rounded px-1 py-0.5 mt-1">
                                  <Icon class="inline w-4 h-4 mr-1" name="bx:bxs-time" />
                                  {getEventTimeDisplay(timeSlot.time, event)}
                                  {/* Indicator for specific start time */}
                                  {event.startTime && (
                                    <span class="w-2 h-2 bg-orange-400 rounded-full inline-block ml-1" title="Horario específico"></span>
                                  )}
                                </div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div class="text-black-400 text-sm text-center py-4">
                            —
                          </div>
                        )}
                      </td>
                    );
                  })}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  ))}

  <!-- Legend -->
  <!-- <div class="mt-8 pt-6 border-t border-gray-200">

    <h4 class="text-sm font-medium text-black-900 mb-3">Tipos de eventos:</h4>
    <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-3 text-xs mb-6">
      <div class="flex items-center gap-2">
        <Icon class="w-4 h-4 text-blue-600" name="bx:bxs-microphone" />
        <span>Conferencias</span>
      </div>
      <div class="flex items-center gap-2">
        <Icon class="w-4 h-4 text-green-600" name="bx:bxs-wrench" />
        <span>Talleres</span>
      </div>
      <div class="flex items-center gap-2">
        <Icon class="w-4 h-4 text-purple-600" name="bx:bxs-group" />
        <span>Mesas redondas</span>
      </div>
      <div class="flex items-center gap-2">
        <Icon class="w-4 h-4 text-black-600" name="bx:bxs-coffee" />
        <span>Pausas</span>
      </div>
      <div class="flex items-center gap-2">
        <Icon class="w-4 h-4 text-yellow-600" name="bx:bxs-star" />
        <span>Especiales</span>
      </div>
      <div class="flex items-center gap-2">
        <Icon class="w-4 h-4 text-indigo-600" name="bx:bxs-id-card" />
        <span>Registro</span>
      </div>
      <div class="flex items-center gap-2">
        <Icon class="w-4 h-4 text-pink-600" name="bx:bxs-store" />
        <span>Feria</span>
      </div>
    </div>


    <h4 class="text-sm font-medium text-black-900 mb-3">Duración de eventos:</h4>
    <div class="grid grid-cols-2 md:grid-cols-4 gap-3 text-xs">
      <div class="flex items-center gap-2 px-3 py-2 bg-green-50 rounded-lg">
        <div class="w-3 h-3 bg-green-500 rounded-full"></div>
        <span class="px-2 py-1 bg-green-100 text-green-700 rounded-full font-medium">30m</span>
        <span>Eventos cortos</span>
      </div>
      <div class="flex items-center gap-2 px-3 py-2 bg-blue-50 rounded-lg">
        <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
        <span class="px-2 py-1 bg-blue-100 text-blue-700 rounded-full font-medium">1h</span>
        <span>Eventos estándar</span>
      </div>
      <div class="flex items-center gap-2 px-3 py-2 bg-orange-50 rounded-lg">
        <div class="w-3 h-3 bg-orange-500 rounded-full"></div>
        <span class="px-2 py-1 bg-orange-100 text-orange-700 rounded-full font-medium">1h 30m</span>
        <span>Eventos largos</span>
      </div>
      <div class="flex items-center gap-2 px-3 py-2 bg-red-50 rounded-lg">
        <div class="w-3 h-3 bg-red-500 rounded-full"></div>
        <span class="px-2 py-1 bg-red-100 text-red-700 rounded-full font-medium">2h+</span>
        <span>Eventos extensos</span>
      </div>
    </div>

    <h4 class="text-sm font-medium text-black-900 mb-3 mt-6">Indicadores visuales:</h4>
    <div class="grid md:grid-cols-2 gap-4 text-xs">
      <div class="space-y-2">
        <div class="flex items-center gap-3">
          <div class="w-12 h-6 bg-gray-100 rounded relative">
            <div class="absolute left-0 top-0 bottom-0 w-1 bg-blue-500 rounded-l"></div>
          </div>
          <span>Barra lateral: color de la sala</span>
        </div>
        <div class="flex items-center gap-3">
          <div class="w-12 h-6 bg-gray-100 rounded border-l-4 border-purple-500"></div>
          <span>Grosor del borde: duración del evento</span>
        </div>
      </div>
      <div class="space-y-2">
        <div class="flex items-center gap-3">
          <span class="px-2 py-1 bg-blue-100 text-blue-700 rounded-full font-medium text-xs">16:00 - 17:30</span>
          <span>Horario completo con hora de fin</span>
        </div>
        <div class="flex items-center gap-3">
          <div class="w-6 h-6 bg-blue-500 rounded-full"></div>
          <span>Punto de color: identificación de sala</span>
        </div>
      </div>
    </div>
  </div> -->


</div>

<script>
  // Tab and dropdown functionality
  document.addEventListener('DOMContentLoaded', function() {
    const tabs = document.querySelectorAll('.schedule-tab');
    const contents = document.querySelectorAll('.schedule-content');
    const dropdownToggle = document.querySelector('.schedule-dropdown-toggle');
    const dropdownMenu = document.querySelector('.schedule-dropdown-menu');
    const dropdownItems = document.querySelectorAll('.schedule-dropdown-item');
    const dropdownChevron = document.querySelector('.schedule-dropdown-chevron') as HTMLElement;
    const selectedDay = document.querySelector('.schedule-dropdown-selected-day');
    const selectedDate = document.querySelector('.schedule-dropdown-selected-date');

    function switchTab(index) {
      // Update desktop tabs
      tabs.forEach(t => {
        t.classList.remove('border-indigo-500', 'text-indigo-600');
        t.classList.add('border-transparent', 'text-black-500');
      });
      
      if (tabs[index]) {
        tabs[index].classList.remove('border-transparent', 'text-black-500');
        tabs[index].classList.add('border-indigo-500', 'text-indigo-600');
      }

      // Update dropdown items
      dropdownItems.forEach(item => {
        item.classList.remove('bg-indigo-50', 'text-indigo-600');
        item.classList.add('text-gray-900');
      });
      
      if (dropdownItems[index]) {
        dropdownItems[index].classList.remove('text-gray-900');
        dropdownItems[index].classList.add('bg-indigo-50', 'text-indigo-600');
      }

      // Update dropdown selected text
      const dayData = Array.from(dropdownItems)[index];
      if (dayData && selectedDay && selectedDate) {
        const dayElement = dayData.querySelector('div:first-child');
        const dateElement = dayData.querySelector('div:last-child');
        if (dayElement && dateElement) {
          selectedDay.textContent = dayElement.textContent;
          selectedDate.textContent = dateElement.textContent;
        }
      }
      
      // Hide all content
      contents.forEach(content => {
        content.classList.add('hidden');
        content.classList.remove('block');
      });
      
      // Show corresponding content
      const targetContent = document.querySelector(`[data-content="${index}"]`);
      if (targetContent) {
        targetContent.classList.remove('hidden');
        targetContent.classList.add('block');
      }
    }

    // Desktop tab functionality
    tabs.forEach((tab, index) => {
      tab.addEventListener('click', function() {
        switchTab(index);
      });
    });

    // Mobile dropdown functionality
    if (dropdownToggle && dropdownMenu) {
      dropdownToggle.addEventListener('click', function() {
        const isOpen = !dropdownMenu.classList.contains('hidden');
        
        if (isOpen) {
          dropdownMenu.classList.add('hidden');
          if (dropdownChevron) {
            dropdownChevron.style.transform = 'rotate(0deg)';
          }
          dropdownToggle.setAttribute('aria-expanded', 'false');
        } else {
          dropdownMenu.classList.remove('hidden');
          if (dropdownChevron) {
            dropdownChevron.style.transform = 'rotate(180deg)';
          }
          dropdownToggle.setAttribute('aria-expanded', 'true');
        }
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', function(event) {
        const target = event.target as Node;
        if (target && dropdownToggle && dropdownMenu && 
            !dropdownToggle.contains(target) && !dropdownMenu.contains(target)) {
          dropdownMenu.classList.add('hidden');
          if (dropdownChevron) {
            dropdownChevron.style.transform = 'rotate(0deg)';
          }
          dropdownToggle.setAttribute('aria-expanded', 'false');
        }
      });
    }

    // Dropdown item functionality
    dropdownItems.forEach((item, index) => {
      item.addEventListener('click', function() {
        switchTab(index);
        // Close dropdown
        if (dropdownMenu && dropdownToggle) {
          dropdownMenu.classList.add('hidden');
          if (dropdownChevron) {
            dropdownChevron.style.transform = 'rotate(0deg)';
          }
          dropdownToggle.setAttribute('aria-expanded', 'false');
        }
      });
    });
  });
</script>

<style>
  .schedule-tab {
    transition: all 0.2s ease-in-out;
  }
  
  .schedule-tab:hover {
    transform: translateY(-1px);
    cursor: pointer;
  }
  
  .schedule-content {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>
